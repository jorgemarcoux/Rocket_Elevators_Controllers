import time

class Column:
    def __init__(self,number,floorsNumber,minimumFloor,maximumFloor,elevatorsPerColumn):
      self.number = number
      self.floorsNumber = floorsNumber
      self.minimumFloor = minimumFloor
      self.maximumFloor = maximumFloor
      self.elevatorsPerColumn = elevatorsPerColumn

    def RequestElevator(self,requestedFloor,direction,targetFloor):
      elevator1.getFloorsGap(requestedFloor)
      elevator2.getFloorsGap(requestedFloor)
      if elevator1.state == 'idle' and elevator2.state == 'idle':
        if elevator1.floorsGap < elevator2.floorsGap:
          print('Scenario - call from floor #',requestedFloor, 'going to #',targetFloor, 'should send elevator 1')
          print('Elevator:', elevator1.number, ' at floor ',elevator1.currentFloor,' is sent')
          elevator1.moveElevator(requestedFloor,targetFloor)
        else: 
            print('Scenario - call from floor #',requestedFloor, 'going to #',targetFloor, 'should send elevator 2')
            print('elevator:', elevator2.number, ' at floor ',elevator2.currentFloor,' is sent')
            elevator2.moveElevator(requestedFloor,targetFloor)
      elif elevator1.currentFloor == requestedFloor and elevator1.direction == direction:
        if elevator1.direction == 'up' and direction == 'up' and elevator1.currentFloor <= requestedFloor:
          print('Scenario - call from floor #',requestedFloor, 'going to #',targetFloor, 'should send elevator 1')
          print('Elevator ',elevator1.number, ' at floor ',elevator1.currentFloor,'is sent')
          elevator1.moveElevator(requestedFloor,targetFloor)
        else:
            elevator1.direction == 'down' and direction =='down' and elevator1.currentFloor >= requestedFloor
            print('Scenario - call from floor #',requestedFloor, 'going to #',targetFloor, 'should send elevator 1')
            print('elevator ',elevator1.number, ' at floor ',elevator1.currentFloor,' is sent')
            elevator1.moveElevator(requestedFloor,targetFloor)
      elif elevator2.currentFloor == requestedFloor and elevator2.direction == direction:
        if elevator2.direction =='up' and direction =='up' and elevator2.currentFloor <= requestedFloor:
            print('Scenario - call from floor #',requestedFloor, 'going to #',targetFloor, 'should send elevator 2')
            print('Elevator ',elevator2.number, ' at floor ',elevator2.currentFloor,' is sent')
            elevator2.moveElevator(requestedFloor,targetFloor)
        else:
              elevator2.direction == 'down' and direction =='down' and elevator1.currentFloor >= requestedFloor
              print('Scenario - call from floor #',requestedFloor, 'going to #',targetFloor, 'should send elevator 2')
              print('elevator ',elevator2.number, ' at floor ',elevator2.currentFloor,' is sent')
              elevator2.moveElevator(requestedFloor,targetFloor)
      elif elevator1.floorsGap < elevator2.floorsGap:
          if elevator1.direction == direction:
            if elevator1.direction == 'up' and direction == 'up' and elevator1.currentFloor <= requestedFloor:
              print('Scenario - call from floor #',requestedFloor, 'going to #',targetFloor, 'should send elevator 1')
              print('elevator ',elevator1.number, ' at floor ',elevator1.currentFloor,' is sent')
              elevator1.moveElevator(requestedFloor,targetFloor)
            else:
                elevator1.direction == 'down' and direction =='down' and elevator1.currentFloor >= requestedFloor
                print('Scenario - call from floor #',requestedFloor, 'going to #',targetFloor, 'should send elevator 1')
                print('elevator ', elevator1.number, ' at floor ',elevator1.currentFloor,' is sent')
                elevator1.moveElevator(requestedFloor,targetFloor)
          elif elevator2.direction == direction:
              if elevator1.direction == 'up' and direction == 'up' and elevator1.currentFloor <= requestedFloor:
                print('Scenario - call from floor #',requestedFloor, 'going to #',targetFloor, 'should send elevator 2')
                print('elevator ', elevator2.number, ' at floor ',elevator2.currentFloor,' is sent')
                elevator2.moveElevator(requestedFloor,targetFloor)
              else:
                  elevator1.direction == 'down' and direction =='down' and elevator1.currentFloor >= requestedFloor
                  print('Scenario - call from floor #',requestedFloor, 'going to #',targetFloor, 'should send elevator 2')
                  print('elevator ' + elevator2.number+ ' at floor '+elevator2.currentFloor+' is sent')
                  elevator2.moveElevator(requestedFloor,targetFloor)
      elif elevator1.state == 'idle' and elevator2.state == 'moving':
                print('Scenario - call from floor #',requestedFloor, 'going to #',targetFloor, 'should send elevator 1')
                print('elevator ', elevator1.number, ' at floor ',elevator1.currentFloor,' is sent')
                elevator1.moveElevator(requestedFloor,targetFloor)
              
          

class Elevator:
    def __init__(self,number):
      self.number = number

    state = 'idle' # idle, moving, stopped, offline
    direction = 'none'# none, up, down
    currentFloor = 1
    floorsGap = 0
    internalList = []

    def RequestFloor(self,requestedFloor): 
        self.internalList.append(requestedFloor)
        if requestedFloor > self.currentFloor:
             self.direction = 'up' 
             print('Elevator',self.number,'at floor #',self.currentFloor,'direction:',self.direction)
             time.sleep(1)
             print('Moving to floor #',requestedFloor)
        while self.currentFloor < requestedFloor:
             self.currentFloor+=1
             time.sleep(1)
             print('Elevator ',self.number, 'is at floor #', self.currentFloor)
        else:
             requestedFloor < self.currentFloor
             self.direction = 'down'
             print('Elevator',self.number,'at floor #',self.currentFloor,'direction:',self.direction)
             print('Moving to floor #',requestedFloor)
        while requestedFloor < self.currentFloor:
             self.currentFloor-=1
             print('Elevator ',self.number, 'is at floor #', self.currentFloor)
        if self.currentFloor == requestedFloor:
             print('Elvator stopped')
             time.sleep(1)
             print('Elevator',self.number, 'arrived at target floor')
             time.sleep(1)
             print('Opening doors...')
             time.sleep(1)
             print('Person exits the elevator')
             time.sleep(1)
             print('closing doors...')
             time.sleep(1)


    def getFloorsGap(self,requestedFloor):
 	    self.floorsGap = abs(self.currentFloor-requestedFloor)

    def moveElevator(self,requestedFloor,targetFloor):
      if requestedFloor > self.currentFloor:
        self.direction = 'up'
        print('Elevator',self.number,'at floor #', self.currentFloor, 'direction:',self.direction)
        while self.currentFloor<requestedFloor:
          self.currentFloor+=1
          print('Elevator ',self.number, 'is at floor #', self.currentFloor)
      else:
           requestedFloor<self.currentFloor
           self.direction = 'down'
           print('Elevator',self.number,'at floor #', self.currentFloor, 'direction:',self.direction)
           while requestedFloor < self.currentFloor:
             self.currentFloor-=1
             print('Elevator ',self.number, 'is at floor #', self.currentFloor)

      if self.currentFloor == requestedFloor:
        print('Elvator stopped')
        time.sleep(1)
        print('Elevator',self.number, 'arrived at target floor')
        time.sleep(1)
        print('Opening doors...')
        time.sleep(1)
        print('Person enters the elevator')
        time.sleep(1)
        print('closing doors...')
        time.sleep(1)
        print('Going to requested floor...')
        time.sleep(1)
      if targetFloor > self.currentFloor:
        self.direction = 'up'  
        print('Elevator direction: ', self.direction)
        while targetFloor > self.currentFloor:
          self.currentFloor+=1
          print('Elevator ',self.number, 'is at floor #', self.currentFloor)
      if targetFloor < self.currentFloor:
        self.direction = 'down'  
        print('Elevator direction: ', self.direction)
        while targetFloor < self.currentFloor:
          self.currentFloor-=1
          print('elevator ',self.number, 'is at floor #', self.currentFloor)
        if self.currentFloor == targetFloor:
          time.sleep(1)
          print('Elvator stopped')
          time.sleep(1)
          print('Elevator',self.number, 'arrived at target floor')
          time.sleep(1)
          print('Opening doors...')
          time.sleep(1)
          print('Person exits the elevator')
          time.sleep(1)
          print('closing doors...') 





# Test Section ----------------------------------------------------
column1 = Column(1,10,1,10,2)
elevator1 = Elevator(1)
elevator2 = Elevator(2)
# To make your own test, just call the function: column1.RequestElevator(requestedFloor, direction,targetFloor . Please indicate the direction 'up' or 'down' in lowercase.)
def scenario1():
  elevator1.state = 'idle'
  elevator1.currentFloor = 2
  elevator2.state = 'idle'
  elevator2.currentFloor = 6
  column1.RequestElevator(3,'up',7)

def scenario2():
  elevator1.state = 'idle'
  elevator1.currentFloor = 10
  elevator2.state = 'idle'
  elevator2.currentFloor = 3
  column1.RequestElevator(1,'up',6) # scenario 2 - 1st call
  # scenario 2 - 2nd call
  time.sleep(1)
  elevator2.currentFloor = 6
  column1.RequestElevator(3,'up',5)
  # scenario 2 - 3rd call
  time.sleep(1)
  elevator2.currentFloor = 5
  column1.RequestElevator(9,'down',2)

def scenario3():
  elevator1.state = 'idle'
  elevator1.currentFloor = 10
  elevator2.state = 'moving'
  elevator2.currentFloor = 3
  column1.RequestElevator(3,'down',2)
  # 2nd call
  elevator1.currentFloor = 2
  elevator2.currentFloor = 6
  elevator2.state = 'idle'
  column1.RequestElevator(10,'down',3)


# scenario1()
# scenario2()
# scenario3()
# --------------------------------------------------------
# RequestFloor Method--------
# elevator2.currentFloor = 6
# elevator1.RequestFloor(8)
# elevator2.RequestFloor(2)