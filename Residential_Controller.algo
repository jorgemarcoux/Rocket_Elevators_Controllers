DEFINE elevator USING _id

  SET id TO: AUTOINCREMENT id,
  SET state TO on_service,
  SET InternalList to empty list
  SET max_weight TO 1000
  SET current_weight TO 0
  SET current_floor TO current_floor
  SET idle_time TO 0
  SET elevator_status TO idle
  SET doors_open TO false
  SET door_closing_path_clear TO true
  SET overload to false
  SET elevator_is_moving TO false
  SET elevator_direction TO NONE
  SET floors_gap TO 0
  SET directionUpCheck TO directionUpCheck
  SET directionDownCheck TO directionDownCheck
  SET target_floor_gap TO target_floor_gap
  SET get_target_floor_gap TO get_target_floor_gap
  SET ElevatorButtons TO EMPTY list

  SEQUENCE createInternalList using total_elevators
     [...]
  ENDSEQUENCE

  SEQUENCE get_current_weight USING weight_sensor
    SET current_weight TO READ weight_sensor
  ENDSEQUENCE

  SEQUENCE handle_idle_time
    IF idle_time IS GREATER THAN 5 minutes THEN
    SET current_floor TO 1
    SET elevator_status TO idle
  ENDSEQUENCE

  SEQUENCE check_doors_open
    CALL open_doors
    IF doors_open EQUALS TO true
      SET doors_open TO true
    ENDIF
  ENDSEQUENCE

  SEQUENCE check_door_path USING doors_sensor
    IF nothing IS BETWEEN doors_sensor THEN
      SET door_closing_path_clear TO true
    ELSE
      SET door_closing_path_clear TO false
    ENDIF
  ENDSEQUENCE

  SEQUENCE check_overload USING current_weight AND max_weight
    IF current_weight IS LESS than max_weight THEN
      SET overload TO false
    ELSE
      SET overload TO true
      DISPLAY 'There is an overload'
      CALL overload_sound
      SET doors_open TO true
      Wait 5 seconds
      Check again
    ENDIF
  ENDSEQUENCE

  SEQUENCE get_elev_movement
    CALL elevator_direction
    IF elevator_direction IS EQUAL TO UP OR DOWN THEN
      SET elevator_is_moving TO true
    ELSE
      SET elevator_is_moving TO false
    ENDIF
  ENDSEQUENCE

  SEQUENCE get_elevator_direction USING InternalList ARRAY, current_floor AND elevator_is_moving
    IF current_item IN InternalList ARRAY IS GREATER THAN elevator's current_floor THEN
      SET elevator_direction TO UP
      SET elevator_is_moving TO true
    ELSE current_item IN InternalList ARRAY IS LESS THAN elevator's current_floor THEN
      SET elevator_direction TO DOWN
      SET elevator_is_moving TO true
    ELSE
      SET elevator_direction TO NONE
    ENDIF
  ENDSEQUENCE

  SEQUENCE start_moving USING doors_open, requested_floor AND overload
    IF doors_open EQUALS TO false AND InternalList ARRAY IS GREATER THAN 0 AND overload EQUALS TO  false THEN
      CALL get_elevator_direction
      SET elevator_is_moving TO true
    ENDIF
  ENDSEQUENCE

  SEQUENCE close_doors USING close_door_button, door_closing_path_clear AND overload
    IF close_door_button IS PRESSED AND door_closing_path_clear EQUALS TO true AND  overload EQUALS TO false THEN
      SET doors_open TO false
      close doors
    ELSE close_door_button IS NOT PRESSED AND door_closing_path_clear EQUALS TO true AND overload EQUALS TO false THEN
      Wait 5 seconds
      Check again
    ENDIF
  ENDSEQUENCE

  SEQUENCE get_floors_gap_elev USING queue_requested_floors ARRAY AND elevator's current_floor
    FOR EACH item IN queue_requested_floors ARRAY
      READ current_item
      SET floors_gap_elev TO elevator's current_floor MINUS current_item IN queue_requested_floors ARRAY  
      IF floors_gap_elev IS LESS THAN 0 THEN
        TRANSFORM to positive number
      ENDIF
    ENDFOR
  ENDSEQUENCE

  SEQUENCE stop USING elevator_status
    SET elevator_status TO stop
  ENDSEQUENCE 

SEQUENCE get_floors_gap USING current_floor AND queue_requested_floors ARRAY
   FOR EACH Column
    FOR EACH Elevator IN total_elevators OF Column
       SET floors_gap TO DIFFERENCE BETWEEN current_floor AND current item IN queue_requested_floors ARRAY
    ENDFOR
   ENDFOR
ENDSEQUENCE

SEQUENCE get_target_floor_gap USING internalList OF Elevator and current_floor OF Elevator
  SET target_floor_ga TO DIFFERENCE BETWEEN current item IN internalList AND current item IN queue_requested_floors ARRAY
  IF target_floor_gap IS LESS THAN 0 THEN
    CONVERT to positive number
  ENDIF
ENDSEQUENCE

DEFINE ElevatorButtons USING maximum_floor AND mainimum_floor
  status: off
ENDDEFINE

SEQUENCE creatingElevatorButtons USING total_elevators AND number_floors AND minimum_floor AND maximum_floor AND total_columns

   SET itarator TO minimum_floor
   WHILE itirator IS EQUAL OR LESS TO maximum_floor
     FOR EACH floor IN current Elevator in total_elevators
       INIT newElevatorButton TO INSTANTIATE ElevatorButtons WITH iterator 
       ADD newElevatorButton TO ElevatorButtons list IN EACH Elevator IN Column
       INCREMENT iterator BY 1
     ENDFOR
   ENDWHILE

ENDSEQUENCE

ENDDEFINE



CALL ElevatorButtons USING 1 AND 10

-----------Creating elevators array--------------
SEQUENCE creating_elevators USING total_elevators OF Column
  SET total_elevators TO 2
ENDSEQUENCE

--------Defining and creating columns-----------
DEFINE Column
 SET number_cols TO number_cols
 SET number_floors TO number_floors
 SET total_elevators TO total_elevators
 SET minimum_floor TO minimum_floor
 SET maximum_floor TO maximum_floor
 SET col_status TO col_status
 SET callElevButtons TO EMPTY list
ENDDEFINE


SET column1 TO INSTANTIATE Columns WITH 1, 10, 2, 1, 10 AND on_service
----------------------------------

DEFINE callElevButtons USING maximum_floor OF Column AND minimum_floor OF Column
  INIT iterator TO minimum_floor
      FOR number_floors
       IF iterator IS EQUAL TO minimum_floor IN Columns AND EQUAL OR LESS THAN maximum_floor IN Columns THEN
         INIT newcallElevButtons TO INSTANTIATE callElevButtons WITH iterator 
         ADD newcallElevButtons TO callElevButtons list IN Columns
         INCREMENT iterator BY 1
       ENDIF
      ENDFOR
ENDDEFINE

CALL callElevButtons 10 AND 1

------Create new elevator call-----------
FOREACH Column
   DEFINE ElevatorCall USING direction AND call_from_floor FROM callElevButtons OF Column
     Direction: requested_direction
     CallFromFloor: call_from_floor
   ENDDEFINE 
 FOREACH
FOREACH
------------------------------------------------------

-------------Request elevator buttons up & down----------

SEQUENCE elevator_requested USING call_elevator_button_down OR call_elevator_button_up
 FOR EACH column IN total_columns
   IF call_elevator_button_up IS PRESSED THEN
     READ call_from_floor
     SET new ElevatorCall WITH call_from_floor AND Direction UP
     ADD ElevatorCall TO queue_requested_floors ARRAY
     SORT queue_requested_floors ARRAY (descending)
     CALL deciding_elevator RETURNING elevator
   ELSEIF call_elevator_button_down IS PRESSED THEN
     READ call_from_floor
     SET new ElevatorCall WITH call_from_floor AND Direction DOWN
     ADD ElevatorCall TO queue_requested_floors ARRAY
     SORT queue_requested_floors ARRAY (ascending)
     CALL deciding_elevator RETURNING elevator
  ENDFOR
ENDSEQUENCE


----------------------------------------------------

SEQUENCE sort_internalList USING elevator_direction
 FOREACH Elevator IN total_elevators 
  IF elevator_direction EQUALS TO UP THEN
    SORT InternalList ARRAY (descending)
  ELSE
    SORT InternalList ARRAY (ascending)
  ENDIF
ENDSEQUENCE

-------------BUTTONS REQUESTED FLOOR----------------

SEQUENCE floor_requested USING requested_floor_buttons

   FOR EACH column IN total_columns
    FOR EACH elevator IN total_elevators
     READ requested_floor_button
     SET status OF PRESSED ElevatorButtons TO on
     ADD TO InternalList ARRAY
     CALL sort_internalList
     ENDIF
    ENDFOR
   ENDFOR

ENDSEQUENCE
-------------------------------------------------------
-----------Check elevator direction & requested direction------

SEQUENCE elevator_direction_check_queue USING elevator_direction AND queue_requested_floors ARRAY AND current_floor OF elevator

   IF elevator_direction IS UP AND direction of current item IN queue_requested_floors ARRAY IS UP AND requested_floor of current item IN queue_requested_floors ARRAY IS LESS THAN elevator's current_floor THEN
     SET directionUpCheck TO false
   ELSE IF elevator_direction IS going_down AND direction of current item IN   queue_requested_floors ARRAY IS DOWN AND requested_floor of current item IN   queue_requested_floors ARRAY IS BIGGER THAN elevator's current_floor THEN
     SET directionDownCheck TO false
   ENDIF

ENDSEQUENCE
-------------------------------------------------------
-------------SENDING ELEVATOR LOGIC-----------------------

SEQUENCE deciding_elevator USING elevator_direction_check_queue
  
  WHILE queue_requested_floors ARRAY IS GREATER THAN 0
    FOR EACH column IN total_columns
     FOR EACH elevator IN column
       FOR EACH item IN queue_requested_floors ARRAY

        CASE asnwering_call_in_queue OF
          CASE 1:
              IF current item IN internalList OR current_floor EQUALS TO floor IN queue_requested_floors ARRAY AND Elevator's direction EQUALS TO direction OF current item IN queue_requested_floors ARRAY AND directionDownCheck OR directionUpCheck EQUAL TO true THEN
                RETURN chosen Elevator
              ENDIF
              IF MORE THAN 1 Elevator meet this criteria THEN
                READ their floors_gap
                RETURN the one with THE SMALLEST floorsGap
            CASE 2:
              DETERMINE the Elevator THAT has THE SMALLEST floors_gap AND whose direction EQUALS TO direction OF current item IN queue_requested_floors ARRAY AND directionDownCheck OR directionUpCheck EQUAL TO true
              IF MORE THAN 1 Elevator meet this criteria THEN
               READ their target_floor_gap
               RETURN the one with THE SMALLEST targetFloorGap
              ENDIF
            CASE 3:
              IF NONE of the above CASES IS true THEN 
                 RETURN Elevator whose status IS idle
                 IF 2 HAVE the status idle THEN
                   RETURN the one WITH THE SMALLEST floors_gap
                 ENDIF
              ENDIF
          ENDCASE

        ADD current_item IN queue_requested_floors ARRAY TO chosen elevator'InternalList ARRAY
        CALL sort_internalList
        REMOVE current_item FROM queue_requested_floors ARRAY 
        SET elevator_is_moving TO true

       ENDFOR
     ENDFOR
   ENDFOR
 ENDWHILE

ENDSEQUENCE

-------------------------------------------------------

-------Answering and deleting calls--------------------

SEQUENCE completing_floor_requests USING InternalList ARRAY AND queue_requested_floors ARRAY

  WHILE InternalList ARRAY OR queue_requested_floors ARRAY IS GREATER THAN 0 AND elevator_status IS on_service

    FOR EACH Elevator IN total_elevators OF Columns
      FOR EACH item IN queue_requested_floors ARRAY
       IF current_item IN InternalList ARRAY EQUALS TO elevator's current_floor THEN
         CALL stop
         CALL open_doors
         REMOVE current item from InternalList ARRAY 
         READ next_item IN InternalList ARRAY
         CALL deciding_elevator
       ENDIF
       ELSEIF current_item IN queue_requested_floors ARRAY EQUALS TO elevator's current_floor THEN
         CALL stop
         CALL open_doors
         READ next_item IN InternalList ARRAY
         CALL deciding_elevator
       ENDIF
      ENDFOR
     ENDFOR
  ENDWHILE

ENDSEQUENCE
----------------------------------------------------------------

WHILE column IS on_service
  RUN ALL elevator SEQUENCES
  RUN completing_floor_requests
  RUN deciding_elevator
  RUN floor_requested
  RUN sort_internalList
  RUN elevator_direction_check_queue
ENDWHILE













   

















